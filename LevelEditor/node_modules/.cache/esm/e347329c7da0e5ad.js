// Copyright (C) 2020, Nicolas Morales Escobar. All rights reserved.
'use strict';;let Express,Path,HTTP,FileSystem,LevelAPI;_7da‍.x([["Server",()=>Server]]);_7da‍.w("express",[["default",["Express"],function(v){Express=v}]]);_7da‍.w("path",[["default",["Path"],function(v){Path=v}]]);_7da‍.w("http",[["default",["HTTP"],function(v){HTTP=v}]]);_7da‍.w("fs",[["default",["FileSystem"],function(v){FileSystem=v}]]);_7da‍.w("./",[["default",["LevelAPI"],function(v){LevelAPI=v}]]);








const PORT = 3000;

       class Server {

    constructor() {

        this.api = _7da‍.a("Express",Express)();
        this.api.use( _7da‍.a("Express",Express).json() )
                .use( _7da‍.a("Express",Express).urlencoded({ extended: false }))
                .use( _7da‍.a("Express",Express).static( _7da‍.a("Path",Path).join( __dirname, '.')))
                .use ( '/api', _7da‍.a("LevelAPI",LevelAPI))


            // this.api.get('/editor', ( request, response ) => {
            //     response.render('editor',{ title:'Level Editor'})
            // });
            this.api.get('/', ( request, response ) => {
                response.render('index',{ title:'Game'})
            });

        /*
        //With get, params come in query
        //With get, params shows on the url
        //With post, params come in body
        //With post, params doesn't show in url
        From the client $.post('/api/get_level_list/pg18nicolas', params)
            .then( response => {

            })
            .catch( error => {

            })

            let params = request.query;
        */

        //optional params :param?


        // this.api.post('/api', ( request, response ) => {
        //     // handle edges from form

        //     let params = request.params; // data attached in the url /api/:name/:id
        //     let query = request.query;   // data attached as a PHP param String
        //     let data = request.body;     // data attached as JSON data


        //     let result = this.handleActionQuery( request.query.action, request.query, request.body );
        //     let JSONString = JSON.stringify( result );
        //     response.send( JSONString )
        // });

        // this.api.post('/api/:action', ( request, response ) => {
        //     // handle edges from form
        //     let result = this.handleActionQuery( request.params.action, request.query, request.body );
        //     let JSONString = JSON.stringify( result );
        //     response.send( JSONString )
        // });

        // this.api.post('/api/save', ( request, response ) => {
        //     // handle edges from form
        //     let result = this.handleActionQuery('save', request.query, request.body );

        //     // Lets get some data to the client
        //     // TODO: something with the form we got sent, like save the content as a file
        //     let JSONString = JSON.stringify( result );
        //     response.send( JSONString )
        // });

        this.run()
    }

    handleActionQuery( action, query, body ) {

        let result = { error: -1 };
        let command = (action == '' ? body.action : action);
        switch (command) {
            case 'Validate':
                result.error = 0;
                break;

            case 'Submit':
                result.error = 0;
                break;

            default:
                result = { error: -2, ...body }
                break;
        }
        // send the result back as JSON data
        return result
    }

    run() {

        this.api.set('port', PORT );
        this.listener = _7da‍.a("HTTP",HTTP).createServer( this.api );
        this.listener.listen( PORT );
        this.listener.on('listening', event => {

            let addr = this.listener.address();
            let bind = typeof addr == `string` ? `pipe ${addr}`: `port ${addr.port}`;

            console.log(`Listening on ${bind}`)
        });
    }
};_7da‍.j(["Server"]);

const server = new Server();